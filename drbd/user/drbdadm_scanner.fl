%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "drbdadm_parser.h"
#include "drbdadm.h"

void syntax_error(char*);

#if 0
#define DP printf("'%s' ",yytext)
#else
#define DP
#endif

#define CP yylval.txt = strdup(yytext)

%}

%option noyywrap

NUM      [0-9][0-9]*[MKG]?
SNUMB    [0-9]{1,3}
IPV4ADDR ({SNUMB}"."){3}{SNUMB}
WS       [ \t]
OPCHAR   [{}=]
%x in_string id

%%

<in_string>[^\"]*   { DP; CP; return TK_STRING; }
<in_string>\"       BEGIN(INITIAL);

<id>\"           BEGIN(in_string);
<id>[a-zA-Z/][a-zA-Z0-9_/.-]* { DP; CP; BEGIN(INITIAL); return TK_STRING; }
<id>[{}]         { DP; BEGIN(INITIAL); return yytext[0]; }
<id>=            { DP; return yytext[0];                 }
<id>{WS}+        /* ignore whitespaces */

\"               BEGIN(in_string);
\n               { line++; }
#[^\n]*          /* ignore comments */
{OPCHAR}         { DP; return yytext[0];                 }
on               { DP; BEGIN(id); return TK_ON;          }
net              { DP; return TK_NET;                    }
disk             { DP; BEGIN(id); return TK_DISK;        }
port             { DP; return TK_PORT;                   }
syncer           { DP; return TK_SYNCER;                 }
device           { DP; BEGIN(id); return TK_DEVICE;      }
global           { DP; return TK_GLOBAL;                 }
address          { DP; return TK_ADDRESS;                }
startup          { DP; return TK_STARTUP;                }
resource         { DP; BEGIN(id); return TK_RESOURCE;    }
rate             { DP; CP; return TK_RATE;               }
size             { DP; CP; return TK_SIZE;               }
group            { DP; CP; return TK_SYNC_GROUP;         }
timeout          { DP; CP; return TK_TIMEOUT;            }
ping-int         { DP; CP; return TK_PING_INT;           }
protocol         { DP; CP; BEGIN(id); return TK_PROTOCOL;}
do-panic         { DP; CP; return TK_DO_PANIC;           }
use-csums        { DP; CP; return TK_USE_CSUMS;          }
skip-sync        { DP; CP; return TK_SKIP_SYNC;          }
al-extents       { DP; CP; return TK_AL_EXTENTS;         }
minor_count      { DP; CP; return TK_MINOR_COUNT;        }
connect-int      { DP; CP; return TK_CONNECT_INT;        }
wfc-timeout      { DP; CP; return TK_WFC_TIMEOUT;        }
max-buffers      { DP; CP; return TK_MAX_BUFFERS;        }
incon-degr-cmd   { DP; CP; return TK_INCON_DEGR_CMD;     }
max-epoch-size   { DP; CP; return TK_MAX_EPOCH_SIZE;     }
degr-wfc-timeout { DP; CP; return TK_DEGR_WFC_TIMEOUT;   }
disable_io_hints { DP; CP; return TK_DISABLE_IO_HINTS;   }
{IPV4ADDR}       { DP; CP; return TK_IPADDR;             }
{NUM}            { DP; CP; return TK_INTEGER;            }
{WS}+            /* ignore whitespaces */
[^ \n\t={}"]+    { syntax_error(yytext); }

%%

void syntax_error(char* text)
{
  fprintf(stderr,"Unknown token '%s' in line %d.\n",text,line);
  exit(2);
}
