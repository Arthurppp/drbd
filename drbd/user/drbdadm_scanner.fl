%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "drbdadm_parser.h"
#include "drbdadm.h"

void syntax_error(char*);

#if 0
#define DP printf("'%s' ",yytext)
#else
#define DP
#endif

#define CP yylval.txt = strdup(yytext)

%}

%option noyywrap

NUM      [1-9][0-9]*[MKG]?
STRING   [a-zA-Z/][a-zA-Z0-9_/]*
SNUMB    [1-9][0-9]{0,2}
IPV4ADDR ({SNUMB}"."){3}{SNUMB}
WS       [ \t]
OPCHAR   [{}=]
%x in_str

%%
\"               BEGIN(in_str);
<in_str>[^\"]*   { DP; CP; return TK_STRING; }
<in_str>\"       BEGIN(INITIAL);
\n               { line++; }
#[^\n]*          /* ignore comments */
{OPCHAR}         { DP; return yytext[0];        }
on               { DP; return TK_ON;            }
net              { DP; return TK_NET;           }
disk             { DP; return TK_DISK;          }
port             { DP; return TK_PORT;          }
syncer           { DP; return TK_SYNCER;        } 
device           { DP; return TK_DEVICE;        }
global           { DP; return TK_GLOBAL;        }
address          { DP; return TK_ADDRESS;       }
resource         { DP; return TK_RESOURCE;      }
minor_count      { DP; return TK_MINOR_COUNT;   }
disable_io_hints { DP; return TK_DISABLE_IO_HINTS;  }
rate             { DP; CP; return TK_RATE;          }
size             { DP; CP; return TK_SIZE;          }
tl-size          { DP; CP; return TK_TL_SIZE;       }
timeout          { DP; CP; return TK_TIMEOUT;       }
ping-int         { DP; CP; return TK_PING_INT;      } 
protocol         { DP; CP; return TK_PROTOCOL;      }
do-panic         { DP; CP; return TK_DO_PANIC;      }
use-csums        { DP; CP; return TK_USE_CSUMS;     }
skip-sync        { DP; CP; return TK_SKIP_SYNC;     }
connect-int      { DP; CP; return TK_CONNECT_INT;   }
incon-degr-cmd   { DP; CP; return TK_INCON_DEGR_CMD;}
{IPV4ADDR}       { DP; CP; return TK_IPADDR;        }
{NUM}            { DP; CP; return TK_INTEGER;}
{STRING}         { DP; CP; return TK_STRING; }
{WS}+            /* ignore whitespaces */
.                { syntax_error(yytext); } 

%%

void syntax_error(char* text)
{
  printf("ERROR: Unexpected character(s) '%s' in line %d.\n",text,line);
  exit(2);
}
